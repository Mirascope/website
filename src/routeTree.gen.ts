/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as PricingImport } from './routes/pricing'
import { Route as IndexImport } from './routes/index'
import { Route as TermsIndexImport } from './routes/terms/index'
import { Route as DocsIndexImport } from './routes/docs.index'
import { Route as BlogIndexImport } from './routes/blog.index'
import { Route as TermsUseImport } from './routes/terms/use'
import { Route as TermsServiceImport } from './routes/terms/service'
import { Route as DocsSplatImport } from './routes/docs.$'
import { Route as BlogSlugImport } from './routes/blog.$slug'
import { Route as DocsProductSplatImport } from './routes/docs.$product.$'
import { Route as DocsProductGuidesSplatImport } from './routes/docs.$product.guides.$'
import { Route as DocsProductApiSplatImport } from './routes/docs.$product.api.$'

// Create/Update Routes

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PricingRoute = PricingImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TermsIndexRoute = TermsIndexImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRoute,
} as any)

const TermsUseRoute = TermsUseImport.update({
  id: '/terms/use',
  path: '/terms/use',
  getParentRoute: () => rootRoute,
} as any)

const TermsServiceRoute = TermsServiceImport.update({
  id: '/terms/service',
  path: '/terms/service',
  getParentRoute: () => rootRoute,
} as any)

const DocsSplatRoute = DocsSplatImport.update({
  id: '/docs/$',
  path: '/docs/$',
  getParentRoute: () => rootRoute,
} as any)

const BlogSlugRoute = BlogSlugImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductSplatRoute = DocsProductSplatImport.update({
  id: '/docs/$product/$',
  path: '/docs/$product/$',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductGuidesSplatRoute = DocsProductGuidesSplatImport.update({
  id: '/docs/$product/guides/$',
  path: '/docs/$product/guides/$',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductApiSplatRoute = DocsProductApiSplatImport.update({
  id: '/docs/$product/api/$',
  path: '/docs/$product/api/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugImport
      parentRoute: typeof rootRoute
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/docs/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatImport
      parentRoute: typeof rootRoute
    }
    '/terms/service': {
      id: '/terms/service'
      path: '/terms/service'
      fullPath: '/terms/service'
      preLoaderRoute: typeof TermsServiceImport
      parentRoute: typeof rootRoute
    }
    '/terms/use': {
      id: '/terms/use'
      path: '/terms/use'
      fullPath: '/terms/use'
      preLoaderRoute: typeof TermsUseImport
      parentRoute: typeof rootRoute
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof rootRoute
    }
    '/terms/': {
      id: '/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$': {
      id: '/docs/$product/$'
      path: '/docs/$product/$'
      fullPath: '/docs/$product/$'
      preLoaderRoute: typeof DocsProductSplatImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/api/$': {
      id: '/docs/$product/api/$'
      path: '/docs/$product/api/$'
      fullPath: '/docs/$product/api/$'
      preLoaderRoute: typeof DocsProductApiSplatImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/guides/$': {
      id: '/docs/$product/guides/$'
      path: '/docs/$product/guides/$'
      fullPath: '/docs/$product/guides/$'
      preLoaderRoute: typeof DocsProductGuidesSplatImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/docs/$': typeof DocsSplatRoute
  '/terms/service': typeof TermsServiceRoute
  '/terms/use': typeof TermsUseRoute
  '/blog': typeof BlogIndexRoute
  '/docs': typeof DocsIndexRoute
  '/terms': typeof TermsIndexRoute
  '/docs/$product/$': typeof DocsProductSplatRoute
  '/docs/$product/api/$': typeof DocsProductApiSplatRoute
  '/docs/$product/guides/$': typeof DocsProductGuidesSplatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/docs/$': typeof DocsSplatRoute
  '/terms/service': typeof TermsServiceRoute
  '/terms/use': typeof TermsUseRoute
  '/blog': typeof BlogIndexRoute
  '/docs': typeof DocsIndexRoute
  '/terms': typeof TermsIndexRoute
  '/docs/$product/$': typeof DocsProductSplatRoute
  '/docs/$product/api/$': typeof DocsProductApiSplatRoute
  '/docs/$product/guides/$': typeof DocsProductGuidesSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/docs/$': typeof DocsSplatRoute
  '/terms/service': typeof TermsServiceRoute
  '/terms/use': typeof TermsUseRoute
  '/blog/': typeof BlogIndexRoute
  '/docs/': typeof DocsIndexRoute
  '/terms/': typeof TermsIndexRoute
  '/docs/$product/$': typeof DocsProductSplatRoute
  '/docs/$product/api/$': typeof DocsProductApiSplatRoute
  '/docs/$product/guides/$': typeof DocsProductGuidesSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pricing'
    | '/privacy'
    | '/blog/$slug'
    | '/docs/$'
    | '/terms/service'
    | '/terms/use'
    | '/blog'
    | '/docs'
    | '/terms'
    | '/docs/$product/$'
    | '/docs/$product/api/$'
    | '/docs/$product/guides/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pricing'
    | '/privacy'
    | '/blog/$slug'
    | '/docs/$'
    | '/terms/service'
    | '/terms/use'
    | '/blog'
    | '/docs'
    | '/terms'
    | '/docs/$product/$'
    | '/docs/$product/api/$'
    | '/docs/$product/guides/$'
  id:
    | '__root__'
    | '/'
    | '/pricing'
    | '/privacy'
    | '/blog/$slug'
    | '/docs/$'
    | '/terms/service'
    | '/terms/use'
    | '/blog/'
    | '/docs/'
    | '/terms/'
    | '/docs/$product/$'
    | '/docs/$product/api/$'
    | '/docs/$product/guides/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PricingRoute: typeof PricingRoute
  PrivacyRoute: typeof PrivacyRoute
  BlogSlugRoute: typeof BlogSlugRoute
  DocsSplatRoute: typeof DocsSplatRoute
  TermsServiceRoute: typeof TermsServiceRoute
  TermsUseRoute: typeof TermsUseRoute
  BlogIndexRoute: typeof BlogIndexRoute
  DocsIndexRoute: typeof DocsIndexRoute
  TermsIndexRoute: typeof TermsIndexRoute
  DocsProductSplatRoute: typeof DocsProductSplatRoute
  DocsProductApiSplatRoute: typeof DocsProductApiSplatRoute
  DocsProductGuidesSplatRoute: typeof DocsProductGuidesSplatRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PricingRoute: PricingRoute,
  PrivacyRoute: PrivacyRoute,
  BlogSlugRoute: BlogSlugRoute,
  DocsSplatRoute: DocsSplatRoute,
  TermsServiceRoute: TermsServiceRoute,
  TermsUseRoute: TermsUseRoute,
  BlogIndexRoute: BlogIndexRoute,
  DocsIndexRoute: DocsIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
  DocsProductSplatRoute: DocsProductSplatRoute,
  DocsProductApiSplatRoute: DocsProductApiSplatRoute,
  DocsProductGuidesSplatRoute: DocsProductGuidesSplatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pricing",
        "/privacy",
        "/blog/$slug",
        "/docs/$",
        "/terms/service",
        "/terms/use",
        "/blog/",
        "/docs/",
        "/terms/",
        "/docs/$product/$",
        "/docs/$product/api/$",
        "/docs/$product/guides/$"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pricing": {
      "filePath": "pricing.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/blog/$slug": {
      "filePath": "blog.$slug.tsx"
    },
    "/docs/$": {
      "filePath": "docs.$.tsx"
    },
    "/terms/service": {
      "filePath": "terms/service.tsx"
    },
    "/terms/use": {
      "filePath": "terms/use.tsx"
    },
    "/blog/": {
      "filePath": "blog.index.tsx"
    },
    "/docs/": {
      "filePath": "docs.index.tsx"
    },
    "/terms/": {
      "filePath": "terms/index.tsx"
    },
    "/docs/$product/$": {
      "filePath": "docs.$product.$.tsx"
    },
    "/docs/$product/api/$": {
      "filePath": "docs.$product.api.$.tsx"
    },
    "/docs/$product/guides/$": {
      "filePath": "docs.$product.guides.$.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
