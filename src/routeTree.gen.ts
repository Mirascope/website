/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as PricingImport } from './routes/pricing'
import { Route as CatchallImport } from './routes/$catchall'
import { Route as IndexImport } from './routes/index'
import { Route as TermsIndexImport } from './routes/terms/index'
import { Route as DocsIndexImport } from './routes/docs.index'
import { Route as DevIndexImport } from './routes/dev/index'
import { Route as BlogIndexImport } from './routes/blog.index'
import { Route as TermsUseImport } from './routes/terms/use'
import { Route as TermsServiceImport } from './routes/terms/service'
import { Route as DevStyleTestImport } from './routes/dev/style-test'
import { Route as DevSocialCardImport } from './routes/dev/social-card'
import { Route as DevCodeHighlightTestImport } from './routes/dev/code-highlight-test'
import { Route as DevAuditMetadataImport } from './routes/dev/audit-metadata'
import { Route as BlogSlugImport } from './routes/blog.$slug'
import { Route as DocsProductSplatImport } from './routes/docs.$product.$'

// Create/Update Routes

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PricingRoute = PricingImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any)

const CatchallRoute = CatchallImport.update({
  id: '/$catchall',
  path: '/$catchall',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TermsIndexRoute = TermsIndexImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRoute,
} as any)

const DevIndexRoute = DevIndexImport.update({
  id: '/dev/',
  path: '/dev/',
  getParentRoute: () => rootRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRoute,
} as any)

const TermsUseRoute = TermsUseImport.update({
  id: '/terms/use',
  path: '/terms/use',
  getParentRoute: () => rootRoute,
} as any)

const TermsServiceRoute = TermsServiceImport.update({
  id: '/terms/service',
  path: '/terms/service',
  getParentRoute: () => rootRoute,
} as any)

const DevStyleTestRoute = DevStyleTestImport.update({
  id: '/dev/style-test',
  path: '/dev/style-test',
  getParentRoute: () => rootRoute,
} as any)

const DevSocialCardRoute = DevSocialCardImport.update({
  id: '/dev/social-card',
  path: '/dev/social-card',
  getParentRoute: () => rootRoute,
} as any)

const DevCodeHighlightTestRoute = DevCodeHighlightTestImport.update({
  id: '/dev/code-highlight-test',
  path: '/dev/code-highlight-test',
  getParentRoute: () => rootRoute,
} as any)

const DevAuditMetadataRoute = DevAuditMetadataImport.update({
  id: '/dev/audit-metadata',
  path: '/dev/audit-metadata',
  getParentRoute: () => rootRoute,
} as any)

const BlogSlugRoute = BlogSlugImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductSplatRoute = DocsProductSplatImport.update({
  id: '/docs/$product/$',
  path: '/docs/$product/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$catchall': {
      id: '/$catchall'
      path: '/$catchall'
      fullPath: '/$catchall'
      preLoaderRoute: typeof CatchallImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugImport
      parentRoute: typeof rootRoute
    }
    '/dev/audit-metadata': {
      id: '/dev/audit-metadata'
      path: '/dev/audit-metadata'
      fullPath: '/dev/audit-metadata'
      preLoaderRoute: typeof DevAuditMetadataImport
      parentRoute: typeof rootRoute
    }
    '/dev/code-highlight-test': {
      id: '/dev/code-highlight-test'
      path: '/dev/code-highlight-test'
      fullPath: '/dev/code-highlight-test'
      preLoaderRoute: typeof DevCodeHighlightTestImport
      parentRoute: typeof rootRoute
    }
    '/dev/social-card': {
      id: '/dev/social-card'
      path: '/dev/social-card'
      fullPath: '/dev/social-card'
      preLoaderRoute: typeof DevSocialCardImport
      parentRoute: typeof rootRoute
    }
    '/dev/style-test': {
      id: '/dev/style-test'
      path: '/dev/style-test'
      fullPath: '/dev/style-test'
      preLoaderRoute: typeof DevStyleTestImport
      parentRoute: typeof rootRoute
    }
    '/terms/service': {
      id: '/terms/service'
      path: '/terms/service'
      fullPath: '/terms/service'
      preLoaderRoute: typeof TermsServiceImport
      parentRoute: typeof rootRoute
    }
    '/terms/use': {
      id: '/terms/use'
      path: '/terms/use'
      fullPath: '/terms/use'
      preLoaderRoute: typeof TermsUseImport
      parentRoute: typeof rootRoute
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof rootRoute
    }
    '/dev/': {
      id: '/dev/'
      path: '/dev'
      fullPath: '/dev'
      preLoaderRoute: typeof DevIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof rootRoute
    }
    '/terms/': {
      id: '/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$': {
      id: '/docs/$product/$'
      path: '/docs/$product/$'
      fullPath: '/docs/$product/$'
      preLoaderRoute: typeof DocsProductSplatImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$catchall': typeof CatchallRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/dev/audit-metadata': typeof DevAuditMetadataRoute
  '/dev/code-highlight-test': typeof DevCodeHighlightTestRoute
  '/dev/social-card': typeof DevSocialCardRoute
  '/dev/style-test': typeof DevStyleTestRoute
  '/terms/service': typeof TermsServiceRoute
  '/terms/use': typeof TermsUseRoute
  '/blog': typeof BlogIndexRoute
  '/dev': typeof DevIndexRoute
  '/docs': typeof DocsIndexRoute
  '/terms': typeof TermsIndexRoute
  '/docs/$product/$': typeof DocsProductSplatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$catchall': typeof CatchallRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/dev/audit-metadata': typeof DevAuditMetadataRoute
  '/dev/code-highlight-test': typeof DevCodeHighlightTestRoute
  '/dev/social-card': typeof DevSocialCardRoute
  '/dev/style-test': typeof DevStyleTestRoute
  '/terms/service': typeof TermsServiceRoute
  '/terms/use': typeof TermsUseRoute
  '/blog': typeof BlogIndexRoute
  '/dev': typeof DevIndexRoute
  '/docs': typeof DocsIndexRoute
  '/terms': typeof TermsIndexRoute
  '/docs/$product/$': typeof DocsProductSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$catchall': typeof CatchallRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/dev/audit-metadata': typeof DevAuditMetadataRoute
  '/dev/code-highlight-test': typeof DevCodeHighlightTestRoute
  '/dev/social-card': typeof DevSocialCardRoute
  '/dev/style-test': typeof DevStyleTestRoute
  '/terms/service': typeof TermsServiceRoute
  '/terms/use': typeof TermsUseRoute
  '/blog/': typeof BlogIndexRoute
  '/dev/': typeof DevIndexRoute
  '/docs/': typeof DocsIndexRoute
  '/terms/': typeof TermsIndexRoute
  '/docs/$product/$': typeof DocsProductSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$catchall'
    | '/pricing'
    | '/privacy'
    | '/blog/$slug'
    | '/dev/audit-metadata'
    | '/dev/code-highlight-test'
    | '/dev/social-card'
    | '/dev/style-test'
    | '/terms/service'
    | '/terms/use'
    | '/blog'
    | '/dev'
    | '/docs'
    | '/terms'
    | '/docs/$product/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$catchall'
    | '/pricing'
    | '/privacy'
    | '/blog/$slug'
    | '/dev/audit-metadata'
    | '/dev/code-highlight-test'
    | '/dev/social-card'
    | '/dev/style-test'
    | '/terms/service'
    | '/terms/use'
    | '/blog'
    | '/dev'
    | '/docs'
    | '/terms'
    | '/docs/$product/$'
  id:
    | '__root__'
    | '/'
    | '/$catchall'
    | '/pricing'
    | '/privacy'
    | '/blog/$slug'
    | '/dev/audit-metadata'
    | '/dev/code-highlight-test'
    | '/dev/social-card'
    | '/dev/style-test'
    | '/terms/service'
    | '/terms/use'
    | '/blog/'
    | '/dev/'
    | '/docs/'
    | '/terms/'
    | '/docs/$product/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CatchallRoute: typeof CatchallRoute
  PricingRoute: typeof PricingRoute
  PrivacyRoute: typeof PrivacyRoute
  BlogSlugRoute: typeof BlogSlugRoute
  DevAuditMetadataRoute: typeof DevAuditMetadataRoute
  DevCodeHighlightTestRoute: typeof DevCodeHighlightTestRoute
  DevSocialCardRoute: typeof DevSocialCardRoute
  DevStyleTestRoute: typeof DevStyleTestRoute
  TermsServiceRoute: typeof TermsServiceRoute
  TermsUseRoute: typeof TermsUseRoute
  BlogIndexRoute: typeof BlogIndexRoute
  DevIndexRoute: typeof DevIndexRoute
  DocsIndexRoute: typeof DocsIndexRoute
  TermsIndexRoute: typeof TermsIndexRoute
  DocsProductSplatRoute: typeof DocsProductSplatRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CatchallRoute: CatchallRoute,
  PricingRoute: PricingRoute,
  PrivacyRoute: PrivacyRoute,
  BlogSlugRoute: BlogSlugRoute,
  DevAuditMetadataRoute: DevAuditMetadataRoute,
  DevCodeHighlightTestRoute: DevCodeHighlightTestRoute,
  DevSocialCardRoute: DevSocialCardRoute,
  DevStyleTestRoute: DevStyleTestRoute,
  TermsServiceRoute: TermsServiceRoute,
  TermsUseRoute: TermsUseRoute,
  BlogIndexRoute: BlogIndexRoute,
  DevIndexRoute: DevIndexRoute,
  DocsIndexRoute: DocsIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
  DocsProductSplatRoute: DocsProductSplatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$catchall",
        "/pricing",
        "/privacy",
        "/blog/$slug",
        "/dev/audit-metadata",
        "/dev/code-highlight-test",
        "/dev/social-card",
        "/dev/style-test",
        "/terms/service",
        "/terms/use",
        "/blog/",
        "/dev/",
        "/docs/",
        "/terms/",
        "/docs/$product/$"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$catchall": {
      "filePath": "$catchall.tsx"
    },
    "/pricing": {
      "filePath": "pricing.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/blog/$slug": {
      "filePath": "blog.$slug.tsx"
    },
    "/dev/audit-metadata": {
      "filePath": "dev/audit-metadata.tsx"
    },
    "/dev/code-highlight-test": {
      "filePath": "dev/code-highlight-test.tsx"
    },
    "/dev/social-card": {
      "filePath": "dev/social-card.tsx"
    },
    "/dev/style-test": {
      "filePath": "dev/style-test.tsx"
    },
    "/terms/service": {
      "filePath": "terms/service.tsx"
    },
    "/terms/use": {
      "filePath": "terms/use.tsx"
    },
    "/blog/": {
      "filePath": "blog.index.tsx"
    },
    "/dev/": {
      "filePath": "dev/index.tsx"
    },
    "/docs/": {
      "filePath": "docs.index.tsx"
    },
    "/terms/": {
      "filePath": "terms/index.tsx"
    },
    "/docs/$product/$": {
      "filePath": "docs.$product.$.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
