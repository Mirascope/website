/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PricingImport } from './routes/pricing'
import { Route as IndexImport } from './routes/index'
import { Route as DocsIndexImport } from './routes/docs.index'
import { Route as BlogIndexImport } from './routes/blog.index'
import { Route as BlogSlugImport } from './routes/blog.$slug'
import { Route as DocsProductIndexImport } from './routes/docs.$product.index'
import { Route as DocsProductSlugImport } from './routes/docs.$product.$slug'
import { Route as DocsProductSectionIndexImport } from './routes/docs.$product.$section.index'
import { Route as DocsProductGroupIndexImport } from './routes/docs.$product.$group.index'
import { Route as DocsProductSectionSlugImport } from './routes/docs.$product.$section.$slug'
import { Route as DocsProductGroupSlugImport } from './routes/docs.$product.$group.$slug'
import { Route as DocsProductSectionGroupIndexImport } from './routes/docs.$product.$section.$group.index'
import { Route as DocsProductSectionGroupSlugImport } from './routes/docs.$product.$section.$group.$slug'

// Create/Update Routes

const PricingRoute = PricingImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRoute,
} as any)

const BlogSlugRoute = BlogSlugImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductIndexRoute = DocsProductIndexImport.update({
  id: '/docs/$product/',
  path: '/docs/$product/',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductSlugRoute = DocsProductSlugImport.update({
  id: '/docs/$product/$slug',
  path: '/docs/$product/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductSectionIndexRoute = DocsProductSectionIndexImport.update({
  id: '/docs/$product/$section/',
  path: '/docs/$product/$section/',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductGroupIndexRoute = DocsProductGroupIndexImport.update({
  id: '/docs/$product/$group/',
  path: '/docs/$product/$group/',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductSectionSlugRoute = DocsProductSectionSlugImport.update({
  id: '/docs/$product/$section/$slug',
  path: '/docs/$product/$section/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductGroupSlugRoute = DocsProductGroupSlugImport.update({
  id: '/docs/$product/$group/$slug',
  path: '/docs/$product/$group/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductSectionGroupIndexRoute =
  DocsProductSectionGroupIndexImport.update({
    id: '/docs/$product/$section/$group/',
    path: '/docs/$product/$section/$group/',
    getParentRoute: () => rootRoute,
  } as any)

const DocsProductSectionGroupSlugRoute =
  DocsProductSectionGroupSlugImport.update({
    id: '/docs/$product/$section/$group/$slug',
    path: '/docs/$product/$section/$group/$slug',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingImport
      parentRoute: typeof rootRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugImport
      parentRoute: typeof rootRoute
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$slug': {
      id: '/docs/$product/$slug'
      path: '/docs/$product/$slug'
      fullPath: '/docs/$product/$slug'
      preLoaderRoute: typeof DocsProductSlugImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/': {
      id: '/docs/$product/'
      path: '/docs/$product'
      fullPath: '/docs/$product'
      preLoaderRoute: typeof DocsProductIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$group/$slug': {
      id: '/docs/$product/$group/$slug'
      path: '/docs/$product/$group/$slug'
      fullPath: '/docs/$product/$group/$slug'
      preLoaderRoute: typeof DocsProductGroupSlugImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$section/$slug': {
      id: '/docs/$product/$section/$slug'
      path: '/docs/$product/$section/$slug'
      fullPath: '/docs/$product/$section/$slug'
      preLoaderRoute: typeof DocsProductSectionSlugImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$group/': {
      id: '/docs/$product/$group/'
      path: '/docs/$product/$group'
      fullPath: '/docs/$product/$group'
      preLoaderRoute: typeof DocsProductGroupIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$section/': {
      id: '/docs/$product/$section/'
      path: '/docs/$product/$section'
      fullPath: '/docs/$product/$section'
      preLoaderRoute: typeof DocsProductSectionIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$section/$group/$slug': {
      id: '/docs/$product/$section/$group/$slug'
      path: '/docs/$product/$section/$group/$slug'
      fullPath: '/docs/$product/$section/$group/$slug'
      preLoaderRoute: typeof DocsProductSectionGroupSlugImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/$section/$group/': {
      id: '/docs/$product/$section/$group/'
      path: '/docs/$product/$section/$group'
      fullPath: '/docs/$product/$section/$group'
      preLoaderRoute: typeof DocsProductSectionGroupIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog': typeof BlogIndexRoute
  '/docs': typeof DocsIndexRoute
  '/docs/$product/$slug': typeof DocsProductSlugRoute
  '/docs/$product': typeof DocsProductIndexRoute
  '/docs/$product/$group/$slug': typeof DocsProductGroupSlugRoute
  '/docs/$product/$section/$slug': typeof DocsProductSectionSlugRoute
  '/docs/$product/$group': typeof DocsProductGroupIndexRoute
  '/docs/$product/$section': typeof DocsProductSectionIndexRoute
  '/docs/$product/$section/$group/$slug': typeof DocsProductSectionGroupSlugRoute
  '/docs/$product/$section/$group': typeof DocsProductSectionGroupIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog': typeof BlogIndexRoute
  '/docs': typeof DocsIndexRoute
  '/docs/$product/$slug': typeof DocsProductSlugRoute
  '/docs/$product': typeof DocsProductIndexRoute
  '/docs/$product/$group/$slug': typeof DocsProductGroupSlugRoute
  '/docs/$product/$section/$slug': typeof DocsProductSectionSlugRoute
  '/docs/$product/$group': typeof DocsProductGroupIndexRoute
  '/docs/$product/$section': typeof DocsProductSectionIndexRoute
  '/docs/$product/$section/$group/$slug': typeof DocsProductSectionGroupSlugRoute
  '/docs/$product/$section/$group': typeof DocsProductSectionGroupIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog/': typeof BlogIndexRoute
  '/docs/': typeof DocsIndexRoute
  '/docs/$product/$slug': typeof DocsProductSlugRoute
  '/docs/$product/': typeof DocsProductIndexRoute
  '/docs/$product/$group/$slug': typeof DocsProductGroupSlugRoute
  '/docs/$product/$section/$slug': typeof DocsProductSectionSlugRoute
  '/docs/$product/$group/': typeof DocsProductGroupIndexRoute
  '/docs/$product/$section/': typeof DocsProductSectionIndexRoute
  '/docs/$product/$section/$group/$slug': typeof DocsProductSectionGroupSlugRoute
  '/docs/$product/$section/$group/': typeof DocsProductSectionGroupIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pricing'
    | '/blog/$slug'
    | '/blog'
    | '/docs'
    | '/docs/$product/$slug'
    | '/docs/$product'
    | '/docs/$product/$group/$slug'
    | '/docs/$product/$section/$slug'
    | '/docs/$product/$group'
    | '/docs/$product/$section'
    | '/docs/$product/$section/$group/$slug'
    | '/docs/$product/$section/$group'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pricing'
    | '/blog/$slug'
    | '/blog'
    | '/docs'
    | '/docs/$product/$slug'
    | '/docs/$product'
    | '/docs/$product/$group/$slug'
    | '/docs/$product/$section/$slug'
    | '/docs/$product/$group'
    | '/docs/$product/$section'
    | '/docs/$product/$section/$group/$slug'
    | '/docs/$product/$section/$group'
  id:
    | '__root__'
    | '/'
    | '/pricing'
    | '/blog/$slug'
    | '/blog/'
    | '/docs/'
    | '/docs/$product/$slug'
    | '/docs/$product/'
    | '/docs/$product/$group/$slug'
    | '/docs/$product/$section/$slug'
    | '/docs/$product/$group/'
    | '/docs/$product/$section/'
    | '/docs/$product/$section/$group/$slug'
    | '/docs/$product/$section/$group/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PricingRoute: typeof PricingRoute
  BlogSlugRoute: typeof BlogSlugRoute
  BlogIndexRoute: typeof BlogIndexRoute
  DocsIndexRoute: typeof DocsIndexRoute
  DocsProductSlugRoute: typeof DocsProductSlugRoute
  DocsProductIndexRoute: typeof DocsProductIndexRoute
  DocsProductGroupSlugRoute: typeof DocsProductGroupSlugRoute
  DocsProductSectionSlugRoute: typeof DocsProductSectionSlugRoute
  DocsProductGroupIndexRoute: typeof DocsProductGroupIndexRoute
  DocsProductSectionIndexRoute: typeof DocsProductSectionIndexRoute
  DocsProductSectionGroupSlugRoute: typeof DocsProductSectionGroupSlugRoute
  DocsProductSectionGroupIndexRoute: typeof DocsProductSectionGroupIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PricingRoute: PricingRoute,
  BlogSlugRoute: BlogSlugRoute,
  BlogIndexRoute: BlogIndexRoute,
  DocsIndexRoute: DocsIndexRoute,
  DocsProductSlugRoute: DocsProductSlugRoute,
  DocsProductIndexRoute: DocsProductIndexRoute,
  DocsProductGroupSlugRoute: DocsProductGroupSlugRoute,
  DocsProductSectionSlugRoute: DocsProductSectionSlugRoute,
  DocsProductGroupIndexRoute: DocsProductGroupIndexRoute,
  DocsProductSectionIndexRoute: DocsProductSectionIndexRoute,
  DocsProductSectionGroupSlugRoute: DocsProductSectionGroupSlugRoute,
  DocsProductSectionGroupIndexRoute: DocsProductSectionGroupIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pricing",
        "/blog/$slug",
        "/blog/",
        "/docs/",
        "/docs/$product/$slug",
        "/docs/$product/",
        "/docs/$product/$group/$slug",
        "/docs/$product/$section/$slug",
        "/docs/$product/$group/",
        "/docs/$product/$section/",
        "/docs/$product/$section/$group/$slug",
        "/docs/$product/$section/$group/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pricing": {
      "filePath": "pricing.tsx"
    },
    "/blog/$slug": {
      "filePath": "blog.$slug.tsx"
    },
    "/blog/": {
      "filePath": "blog.index.tsx"
    },
    "/docs/": {
      "filePath": "docs.index.tsx"
    },
    "/docs/$product/$slug": {
      "filePath": "docs.$product.$slug.tsx"
    },
    "/docs/$product/": {
      "filePath": "docs.$product.index.tsx"
    },
    "/docs/$product/$group/$slug": {
      "filePath": "docs.$product.$group.$slug.tsx"
    },
    "/docs/$product/$section/$slug": {
      "filePath": "docs.$product.$section.$slug.tsx"
    },
    "/docs/$product/$group/": {
      "filePath": "docs.$product.$group.index.tsx"
    },
    "/docs/$product/$section/": {
      "filePath": "docs.$product.$section.index.tsx"
    },
    "/docs/$product/$section/$group/$slug": {
      "filePath": "docs.$product.$section.$group.$slug.tsx"
    },
    "/docs/$product/$section/$group/": {
      "filePath": "docs.$product.$section.$group.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
